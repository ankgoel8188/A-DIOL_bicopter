%% Simulation of an ADIOL controlled bicopter
%
% Author: Jhon Manuel Portella Delado
% Advisor: Ankit Goel
% University: UMBC
%
% Results of the paper were generated by a'FixedStep' value of '1e-5'.
% Nevertheless, to reduce computer resources used by the routine, the value
% of 'FixedStep' was set to '1e-4'. The only difference in the simulation
% results is the convergence time in both cases
%
% Parameters for simulation: m=1 Kg, J=0.05 Kgm^2
%
% There are three sections:
% 1) Simulation (must be executed first)
% 2) Plots for the elliptycal trajectory
% 3) Plots for the Hilbert curve trajectory

clc
close all
clear all

A = [zeros(3,1),eye(3),zeros(3,4);zeros(1,8);zeros(3,5),eye(3);zeros(1,8)];
B = [zeros(3,2);[1 0];zeros(3,2);[0 1]];

% Desired location of the closed loop eigenvalues
p = [-4.5,-4.0,-5,-5.5,-4.5,-4.0,-5,-5.5];

% Gains of the ADIOL controller for the desired closed loop eigenvalues
k = place(A,B,p);

% Simulation
out = sim('DE_IOL','StartTime','0','StopTime','110','FixedStep','1e-4');

%% Elliptical trajectory path following
clc
close all

printing_setup

Time = out.tout;

norm_of_Theta_minus_Theta_hat = out.norm_of_Theta_minus_Theta_hat_ellipse.Data;
rd_1_minus_r1 = out.rd_1_minus_r1_ellipse.Data;
rd_2_minus_r2 = out.rd_2_minus_r2_ellipse.Data;

rd_1 = out.rd_1_ellipse.Data;
rd_2 = out.rd_2_ellipse.Data;

r1 = out.r1_ellipse.Data;
r2 = out.r2_ellipse.Data;
theta = out.theta_ellipse.Data;

u_1 = out.u1_ellipse.Data;
u_2 = out.u2_ellipse.Data;

% time window depending on the simulation time step
% 110 for '1e-4',
% 60 for '1e-5'
tau = 110;

% Elliptical Trajectory

figure(1)
set(gcf,'color','w');
plot(r1(1:floor(end/14)),r2(1:floor(end/14)),'b')
hold on
plot(rd_1(1:floor(end/15)),rd_2(1:floor(end/15)),'--k',LineWidth=3.8)
grid on
xlabel('$r_1\,(\rm{m})$');
ylabel('$r_2\,(\rm{m})$');
axis equal

% States of the bicopter following an elliptical trajectory

figure(2)
set(gcf,'color','w');
subplot(3,1,1)
plot(Time,rd_2,'--k')
hold on
plot(Time,r2,'b')
grid on
xlim([0 tau])
ylim([-1 8])
xticklabels({})
ylabel('$r_1\,(\rm{m})$');

subplot(3,1,2)
plot(Time,rd_1,'--k')
hold on
plot(Time,r1,'b')
grid on
xlim([0 tau])
xticklabels({})
ylabel('$r_2\,(\rm{m})$');

subplot(3,1,3)
plot(Time,theta*180/pi)
grid on
xlabel('$\rm{Time}\,{\rm (s)}$');
ylh=ylabel('$\theta\,(\rm{deg})$');
dy=6;
ylh.Position(1)=ylh.Position(1)+dy;
xlim([0 tau])
yticks([-40 25])

% States and parameter estimation error of the bicopter following an...
%elliptical trajectory

figure(3)
set(gcf,'color','w');
subplot(3,1,1)
semilogy(Time,abs(rd_1_minus_r1))
grid on
xlim([0 tau])
xticklabels({})
ylim([10e-12 5])
yticks([10e-12 1])
ylabel('$||r_{d1} - r_1||$');

subplot(3,1,2)
semilogy(Time,abs(rd_2_minus_r2))
grid on
xlim([0 tau])
xticklabels({})
ylim([10e-12 2])
yticks([10e-12 1])
ylabel('$||r_{d2} - r_2||$');

subplot(3,1,3)
set(gcf,'color','w');
semilogy(Time,norm_of_Theta_minus_Theta_hat)
xlim([0 tau])
ylim([10e-8 100])
yticks([10e-8 100])
grid on
xlabel('$\rm{Time}\,{\rm (s)}$');
ylh2=ylabel('$||\Theta - \hat{\Theta}||$');
dy=0.1;
ylh2.Position(1)=ylh2.Position(1)+dy;

% ADIOL Control signals for a bicopter system to follow an elliptical
% trajectory

figure(4)
set(gcf,'color','w');
subplot(2,1,1)
plot(Time,u_1)
grid on
xlim([0 tau])
xticklabels({})
ylabel('$u_1\,(\rm{N})$');

subplot(2,1,2)
idu2= find( (u_2 <= 0.1) & (u_2 >= -0.1));
plot(Time(idu2(900):idu2(end)),u_2(idu2(900):idu2(end)))
grid on
xlim([0 tau])
ylim([-0.05 0.05])
yticks([-0.05 0.05])
grid on
xlabel('$\rm{Time}\,{\rm (s)}$');
ylh2=ylabel('$u_2\,(\rm{Nm})$');
dy=2.5;
ylh2.Position(1)=ylh2.Position(1)+dy;

%% Hilbert curve path following
clc
close all

printing_setup
Time = out.tout;

rd_1 = out.rd_1_Hilbert.Data;
rd_2 = out.rd_2_Hilbert.Data;

r1 = out.r1_Hilbert.Data;
r2 = out.r2_Hilbert.Data;
theta = out.theta_Hilbert.Data;

norm_of_Theta_minus_Theta_hat = out.norm_of_Theta_minus_Theta_hat_Hilbert.Data;
rd_1_minus_r1 = out.rd_1_minus_r1_Hilbert.Data;
rd_2_minus_r2 = out.rd_2_minus_r2_Hilbert.Data;

u_1 = out.u_1_Hilbert.Data;
u_2 = out.u_2_Hilbert.Data;

% Hilbert curve Trajectory

figure(1)
set(gcf,'color','w');
plot(rd_1,rd_2,'--k')
hold on
plot(r1,r2,'b')
grid on
xlabel('$r_1\,(\rm{m})$');
ylabel('$r_2\,(\rm{m})$');
xlim([-2 14]);
ylim([-25 8]);
axis tight square

% States of the bicopter following a Hilbert curve trajectory

figure(2)
set(gcf,'color','w');
subplot(3,1,1)
plot(Time,rd_2,'--k')
hold on
plot(Time,r2,'b')
grid on
xlim([0 Time(end)])
xticklabels({})
ylabel('$r_1\,(\rm{m})$');

subplot(3,1,2)
plot(Time,rd_1,'--k')
hold on
plot(Time,r1,'b')
grid on
xlim([0 Time(end)])
xticklabels({})
ylabel('$r_2\,(\rm{m})$');

subplot(3,1,3)
plot(Time,theta*180/pi)
grid on
xlabel('$\rm{Time}\, {\rm (s)}$');
ylh=ylabel('$\theta\,(\rm{deg})$');
ha=get(gcf,'children');
set(ha(1),'position',[.1 .15 0.8 0.23])
set(ha(2),'position',[.1 .45 0.8 0.23])
set(ha(3),'position',[.1 .73 0.8 0.23])
dy=1.5;
ylh.Position(1)=ylh.Position(1)+dy;
xlim([0 Time(end)])
ylim([-35 35])

% States and parameter estimation error of the bicopter following a Hilbert
% curve trajectory

figure(3)
set(gcf,'color','w');
subplot(3,1,1)
semilogy(Time,abs(rd_1_minus_r1))
grid on
xlim([0 Time(end)])
xticklabels({})
ylim([10e-10 5])
yticks([10e-10 1])
ylabel('$||r_{d1} - r_1||$');

subplot(3,1,2)
semilogy(Time,abs(rd_2_minus_r2))
grid on
xlim([0 Time(end)])
xticklabels({})
ylim([10e-10 2])
yticks([10e-10 1])
ylabel('$||r_{d2} - r_2||$');

subplot(3,1,3)
set(gcf,'color','w');
semilogy(Time,norm_of_Theta_minus_Theta_hat)
xlim([0 Time(end)])
ylim([10e-9 100])
yticks([10e-9 100])
grid on
xlabel('$\rm{Time} {\rm (s)}$');
ylh2=ylabel('$||\Theta - \hat{\Theta}||$');
dy=0.1;
ylh2.Position(1)=ylh2.Position(1)+dy;

% ADIOL Control signals for a bicopter system to follow a Hilbert curve
% trajectory

figure(4)
set(gcf,'color','w');
subplot(2,1,1)
plot(Time,u_1)
grid on
xlim([0 Time(end)])
ylim([7 14])
xticklabels({})
ylabel('$u_1\,(\rm{N})$');

subplot(2,1,2)
plot(Time,u_2)
grid on
xlim([0 Time(end)])
ylim([-7 6.5])
grid on
xlabel('$\rm{Time} {\rm (s)}$');
ylh2=ylabel('$u_2\,(\rm{Nm})$');
dy=1.5;
ylh2.Position(1)=ylh2.Position(1)+dy;